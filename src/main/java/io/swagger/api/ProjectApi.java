/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Action;
import io.swagger.model.ActionList;
import io.swagger.model.Project;
import io.swagger.model.ProjectList;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-02-27T16:19:37.767Z")

@Api(value = "project", description = "the project API")
@RequestMapping(value = "/api/v1")
public interface ProjectApi {

    @ApiOperation(value = "", nickname = "addAction", notes = "", tags = {"demo",})
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "successful operation")})
    @RequestMapping(value = "/project/{pId}/action",
            consumes = {"application/json"},
            produces = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Action> addAction(@ApiParam(value = "ID", required = true) @PathVariable("pId") Long pId, @ApiParam(value = "a new special Action", required = true) @Valid @RequestBody Action body);


    @ApiOperation(value = "", nickname = "addProject", notes = "We add a new Project", response = ProjectList.class, tags = {"demo",})
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "success", response = ProjectList.class)})
    @RequestMapping(value = "/project",
            consumes = {"application/json"},
            produces = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Project> addProject(@ApiParam(value = "a new special Project", required = true) @Valid @RequestBody Project body);


    @ApiOperation(value = "", nickname = "deleteProject", notes = "Delete it", tags = {"demo",})
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "success"),
            @ApiResponse(code = 404, message = "Project not found")})
    @RequestMapping(value = "/project/{pId}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteProject(@ApiParam(value = "ID", required = true) @PathVariable("pId") Long pId);


    @ApiOperation(value = "", nickname = "getProject", notes = "get one project with all", response = Project.class, tags = {"demo",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = Project.class),
            @ApiResponse(code = 400, message = "Invalid ID supplied")})
    @RequestMapping(value = "/project/{pId}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Project> getProject(@ApiParam(value = "ID", required = true) @PathVariable("pId") Long pId);


    @ApiOperation(value = "", nickname = "listActions", notes = "all actions of a project", response = ActionList.class, tags = {"demo",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = ActionList.class)})
    @RequestMapping(value = "/project/{pId}/action",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<ActionList> listActions(@ApiParam(value = "ID", required = true) @PathVariable("pId") Long pId);


    @ApiOperation(value = "", nickname = "listProjects", notes = "list all projects", response = ProjectList.class, tags = {"demo",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "all projects", response = ProjectList.class)})
    @RequestMapping(value = "/project",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<ProjectList> listProjects();

}
